package algorithm.arrayrotation;

public class ArrayRotation {

	public int[] rotateLeft(int[] array, int numRotation) {

		if (numRotation < 0)
			return rotateRight(array, -numRotation);
		
		if (array == null) {
			return null;
		}

		if (array.length == 0) {
			return new int[0];
		}

		if (array.length == 1) {
			return new int[] { array[0] };
		}

		int[] newArray = new int[array.length];

		int effectiveRotation = numRotation % array.length;

		for (int i = 0; i < array.length; i++) {
			newArray[i] = array[(i + effectiveRotation) % array.length];
		}

		return newArray;
	}

	public int[] rotateRight(int[] array, int numRotation) {
		if (numRotation < 0)
			return rotateLeft(array, -numRotation);

		if (array == null) {
			return null;
		}

		if (array.length == 0) {
			return new int[0];
		}

		if (array.length == 1) {
			return new int[] { array[0] };
		}

		int[] newArray = new int[array.length];

		int effectiveRotation = numRotation % array.length;

		for (int i = 0; i < array.length; i++) {
			newArray[i] = array[(array.length - effectiveRotation + i)
					% array.length];
		}

		return newArray;
	}

}